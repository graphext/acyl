# This is an example goreleaser.yaml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
env:
  - GO111MODULE=on
before:
  hooks:
    - go mod tidy
    - go mod vendor
    # you may remove this if you don't need go generate
    - go generate ./...
builds:
- env:
  - CGO_ENABLED=0
  - GO111MODULE=on
  goos:
  - linux
  - darwin
  - freebsd
  goarch:
  - amd64
archives:
  - replacements:
      darwin: MacOS
      linux: Linux
      freebsd: FreeBSD
      amd64: x86_64
    files:
      - ui/**/*
      - data/words.json.gz
      - README.md
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  filters:
    exclude:
    - '^docs:'
    - '^test:'
nfpms:
  - file_name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"

    homepage: https://github.com/dollarshaveclub/acyl

    # Your app's maintainer (probably you).
    # Default is empty.
    maintainer: Benjamen Keroack <benjamen@dollarshaveclub.com>

    # Your app's description.
    # Default is empty.
    description: Testing Environments on Demand

    # Your app's license.
    # Default is empty.
    license: MIT

    # Formats to be generated.
    formats:
      - deb
      - rpm

    contents:
      - src: "data/words.json.gz"
        dst: "/usr/local/share/acyl/words.json.gz"

release:
  # If set to true, will not auto-publish the release.
  # Default is false.
  draft: false 

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

brews:
  # Name template of the recipe
  # Default to project name
  - name: acyl

    # Repository to push the tap to.
    tap:
      owner: dollarshaveclub
      name: homebrew-public

    # Template for the url.
    # Default is "https://github.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
    #url_template: "http://github.mycompany.com/foo/bar/releases/{{ .Tag }}/{{ .ArtifactName }}"

    # Allows you to set a custom download strategy.
    # Default is empty.
    # download_strategy: CustomGitHubPrivateRepositoryReleaseDownloadStrategy

    # Allows you to add a custom require_relative at the top of the formula template
    # Default is empty
    # custom_require:

    # Git author used to commit to the repository.
    # Defaults are shown.
    commit_author:
      name: goreleaserbot
      email: goreleaser@dollarshaveclub.com

    # Folder inside the repository to put the formula.
    # Default is the root folder.
    folder: Formula

    # Caveats for the user of your binary.
    # Default is empty.
    #caveats: "How to use this binary"

    # Your app's homepage.
    # Default is empty.
    #homepage: "https://example.com/"

    # Your app's description.
    # Default is empty.
    description: "Testing Environments On Demand"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # Default is false.
    #skip_upload: true

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    # Default is empty.
    #custom_block: |
    #  head "https://github.com/some/package.git"
    #  ...

    # Packages your package depends on.
    #dependencies:
    #  - git
    #  - zsh

    # Packages that conflict with your package.
    #conflicts:
    #  - svn
    #  - bash

    # Specify for packages that run as a service.
    # Default is empty.
    #plist: |
    #  <?xml version="1.0" encoding="UTF-8"?>
    #  ...

    # So you can `brew test` your formula.
    # Default is empty.
    #test: |
    #  system "#{bin}/program --version"
    #  ...

    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    install: |
      bin.install "acyl"
      pkgshare.mkpath
      pkgshare.install "data/words.json.gz"
      (pkgshare/"ui").mkpath
      (pkgshare/"ui/views").mkpath
      (pkgshare/"ui/views").install Dir["ui/views/*"]
      (pkgshare/"ui/assets").mkpath
      (pkgshare/"ui/assets").install Dir["ui/assets/*"]
